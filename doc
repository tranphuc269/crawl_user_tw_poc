import java.util.concurrent.*;

public class TimeoutExample {

    public static void main(String[] args) {
        // Thời gian tối đa (đơn vị là giây)
        int maxExecutionTime = 5;

        // Hàm bạn muốn chạy
        Callable<String> yourFunction = () -> {
            // Logic của hàm của bạn ở đây
            // ...

            return "Kết quả của hàm";
        };

        // Thực thi hàm với thời gian giới hạn
        String result = executeWithTimeout(yourFunction, maxExecutionTime);
        System.out.println(result);
    }

    private static <T> T executeWithTimeout(Callable<T> task, int timeoutInSeconds) {
        ExecutorService executor = Executors.newSingleThreadExecutor();
        Future<T> future = executor.submit(task);

        try {
            return future.get(timeoutInSeconds, TimeUnit.SECONDS);
        } catch (InterruptedException | ExecutionException | TimeoutException e) {
            // Xử lý khi quá thời gian
            e.printStackTrace();
        } finally {
            future.cancel(true); // Hủy task nếu chưa hoàn thành
            executor.shutdown(); // Đóng executor
        }

        return null; // Trả về giá trị mặc định nếu quá thời gian
    }
}
